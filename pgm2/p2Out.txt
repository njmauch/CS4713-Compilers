primClassif subClassif   tokenStr
   1 Int i;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   i
   2 Float pi;
SEPARATOR   -            ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   pi
   3 String day;
SEPARATOR   -            ;
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   day
   4    day
SEPARATOR   -            ;
   5    =
OPERAND     IDENTIFIER   day
   7 String name;
OPERAND     STRING       Sunday

CONTROL     DECLARE      String
OPERAND     IDENTIFIER   name
   8 name = "Anita Goodgrade";
SEPARATOR   -            ;
OPERAND     IDENTIFIER   name
OPERATOR    -            =
   9 String weird;
OPERAND     STRING       Anita Goodgrade

CONTROL     DECLARE      String
OPERAND     IDENTIFIER   weird
   10 weird = "\tTX\tTexas\n";
SEPARATOR   -            ;
OPERAND     IDENTIFIER   weird
OPERATOR    -            =
   11 String loc;
OPERAND     STRING       . TX. Texas.
                         09  09     0A
CONTROL     DECLARE      String
OPERAND     IDENTIFIER   loc
   12 loc = "TX";
SEPARATOR   -            ;
OPERAND     IDENTIFIER   loc
OPERATOR    -            =
   13
   14 // numeric stuff
   15 print(">>> Checking datatype results based on left operand");
OPERAND     STRING       TX

SEPARATOR   -            (
   16 pi = 3.14;
OPERAND     STRING       >>> Checking datatype results based on left operand

OPERAND     IDENTIFIER   pi
OPERATOR    -            =
OPERAND     FLOAT        3.14
   17 Float area;
SEPARATOR   -            ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   area
   18 Float radius2;
SEPARATOR   -            ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   radius2
   19 Int radius;
SEPARATOR   -            ;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   radius
   20 radius = 8;
SEPARATOR   -            ;
OPERAND     IDENTIFIER   radius
OPERATOR    -            =
OPERAND     INTEGER      8
   21 radius2 = radius ^ 2;  // square the radius
SEPARATOR   -            ;
OPERAND     IDENTIFIER   radius2
OPERATOR    -            =
OPERAND     IDENTIFIER   radius
OPERATOR    -            ^
OPERAND     INTEGER      2
   22 print("\t1. area all float");
SEPARATOR   -            ;
SEPARATOR   -            (
   23 area = pi * radius2;
OPERAND     STRING       . 1. area all float
                         09
OPERAND     IDENTIFIER   area
OPERATOR    -            =
OPERAND     IDENTIFIER   pi
OPERATOR    -            *
OPERAND     IDENTIFIER   radius2
   24 print("\tradius="
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   25       ,  radius
OPERAND     STRING       . radius=
                         09
SEPARATOR   -            ,
   26       ,  "radius2="
OPERAND     IDENTIFIER   radius
   27       ,  radius2
OPERAND     STRING       radius2=

SEPARATOR   -            ,
   28       ,  "area="
OPERAND     IDENTIFIER   radius2
   29       ,  area);
OPERAND     STRING       area=

SEPARATOR   -            ,
OPERAND     IDENTIFIER   area
SEPARATOR   -            )
   30 Int irad2;
SEPARATOR   -            ;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   irad2
   31 irad2 = radius ^ 2;
SEPARATOR   -            ;
OPERAND     IDENTIFIER   irad2
OPERATOR    -            =
OPERAND     IDENTIFIER   radius
OPERATOR    -            ^
OPERAND     INTEGER      2
   32 print("\t2. area using int radius as left operand");
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   33 area = irad2 * pi;
OPERAND     STRING       . 2. area using int radius as left operand
                         09
OPERAND     IDENTIFIER   area
OPERATOR    -            =
OPERAND     IDENTIFIER   irad2
OPERATOR    -            *
OPERAND     IDENTIFIER   pi
   34 print("\tradius=", radius, "irad2=", irad2, "area=", area);
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   35 Float circum;
OPERAND     STRING       . radius=
                         09
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   circum
   36 Float twoPi;
SEPARATOR   -            ;
CONTROL     DECLARE      Float
OPERAND     IDENTIFIER   twoPi
   37 print("\t3. circumference using twoPi as float * int");
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   38 twoPi = pi * 2;
OPERAND     STRING       . 3. circumference using twoPi as float * int
                         09
OPERAND     IDENTIFIER   twoPi
OPERATOR    -            =
OPERAND     IDENTIFIER   pi
OPERATOR    -            *
OPERAND     INTEGER      2
   39 circum = twoPi * radius;
SEPARATOR   -            ;
OPERAND     IDENTIFIER   circum
OPERATOR    -            =
OPERAND     IDENTIFIER   twoPi
OPERATOR    -            *
OPERAND     IDENTIFIER   radius
   40 print("\tradius=", radius, "twoPi=", twoPi, "circum=", circum);
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   41 print("\t4. circumference using twoPi as int * float");
OPERAND     STRING       . radius=
                         09
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   42 twoPi = 2 * pi;
OPERAND     STRING       . 4. circumference using twoPi as int * float
                         09
OPERAND     IDENTIFIER   twoPi
OPERATOR    -            =
OPERAND     INTEGER      2
OPERATOR    -            *
OPERAND     IDENTIFIER   pi
   43 circum = twoPi * radius;
SEPARATOR   -            ;
OPERAND     IDENTIFIER   circum
OPERATOR    -            =
OPERAND     IDENTIFIER   twoPi
OPERATOR    -            *
OPERAND     IDENTIFIER   radius
   44 print("\tradius=", radius, "twoPi=", twoPi, "circum=", circum);
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   45
   46 // Simple if
   47 i = 0;
OPERAND     STRING       . radius=
                         09
OPERATOR    -            =
OPERAND     INTEGER      0
   48 print(">>> First If");
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   49 if loc == "TX": // check for TX
OPERAND     STRING       >>> First If

CONTROL     FLOW         if
OPERAND     IDENTIFIER   loc
OPERATOR    -            ==
   50     // It is TX
   51     print("\tloc is", loc);
OPERAND     STRING       TX

SEPARATOR   -            (
   52     // it is ok to have this statement on multiple lines.
   53     // That is why we have a semicolon
   54     i
   55        =
   57           + 1;
OPERAND     STRING       . loc is
                         09
CONTROL     END          endif
   59 print("\tDone with first if");
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   60
   61 print(">>> Second If");
OPERAND     STRING       . Done with first if
                         09
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   62 // if then else
   63 if i >= 5:
OPERAND     STRING       >>> Second If

OPERAND     IDENTIFIER   i
OPERATOR    -            >=
OPERAND     INTEGER      5
   64     print("\t2nd if true, i >= 5, i =", i);
SEPARATOR   -            :
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   65 else:
OPERAND     STRING       . 2nd if true, i >= 5, i =
                         09
CONTROL     END          else
   66     print("\t2nd if false, i >= 5, i =", i);
SEPARATOR   -            :
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   67 endif;
OPERAND     STRING       . 2nd if false, i >= 5, i =
                         09
CONTROL     END          endif
   68 // while and if
   69 print(">>> First while i < 5");
SEPARATOR   -            ;
SEPARATOR   -            (
   70 i = 1;
OPERAND     STRING       >>> First while i < 5

OPERAND     IDENTIFIER   i
OPERATOR    -            =
OPERAND     INTEGER      1
   71 while i < 5:
SEPARATOR   -            ;
CONTROL     FLOW         while
OPERAND     IDENTIFIER   i
OPERATOR    -            <
OPERAND     INTEGER      5
   72     print("\ttop of while, i=", i);
SEPARATOR   -            :
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   73     if i < 3:
OPERAND     STRING       . top of while, i=
                         09
CONTROL     FLOW         if
OPERAND     IDENTIFIER   i
OPERATOR    -            <
OPERAND     INTEGER      3
   74         print("\twhile first if true i<3, i=", i);
SEPARATOR   -            :
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   75         i = i + 2;
OPERAND     STRING       . while first if true i<3, i=
                         09
OPERAND     IDENTIFIER   i
OPERATOR    -            =
OPERAND     IDENTIFIER   i
OPERATOR    -            +
OPERAND     INTEGER      2
   76         if loc != "TX":
SEPARATOR   -            ;
CONTROL     FLOW         if
OPERAND     IDENTIFIER   loc
OPERATOR    -            !=
   77              print("\t\twhile inner if true ... wrong!");
OPERAND     STRING       TX

FUNCTION    BUILTIN      print
SEPARATOR   -            (
   78         else:
OPERAND     STRING       . . while inner if true ... wrong!
                         0909
CONTROL     END          else
   79              print('\t\twhile inner if false, loc!=\'TX\', loc is', loc);
SEPARATOR   -            :
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   80         endif;
OPERAND     STRING       . . while inner if false, loc!='TX', loc is
                         0909
CONTROL     END          endif
   81     else:
SEPARATOR   -            ;
CONTROL     END          else
   82         print("\twhile first if false i<3, i=", i);
SEPARATOR   -            :
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   83         if loc=="TX":
OPERAND     STRING       . while first if false i<3, i=
                         09
CONTROL     FLOW         if
OPERAND     IDENTIFIER   loc
OPERATOR    -            ==
   84              print("\t\twhile 2nd inner if true loc=='TX', loc is", loc);
OPERAND     STRING       TX

FUNCTION    BUILTIN      print
SEPARATOR   -            (
   85              i = i + 1;
OPERAND     STRING       . . while 2nd inner if true loc=='TX', loc is
                         0909
OPERAND     IDENTIFIER   i
OPERATOR    -            =
OPERAND     IDENTIFIER   i
OPERATOR    -            +
OPERAND     INTEGER      1
   86         else:
SEPARATOR   -            ;
CONTROL     END          else
   87              print("\t\twhile 2nd inner if false ... wrong");
SEPARATOR   -            :
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   88              i = i + 10;
OPERAND     STRING       . . while 2nd inner if false ... wrong
                         0909
OPERAND     IDENTIFIER   i
OPERATOR    -            =
OPERAND     IDENTIFIER   i
OPERATOR    -            +
OPERAND     INTEGER      10
   89         endif;
SEPARATOR   -            ;
CONTROL     END          endif
   90         print("\twhile first if false after inner if");
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   91     endif;
OPERAND     STRING       . while first if false after inner if
                         09
CONTROL     END          endif
   92     print("\tbottom of while, i=", i);
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   93 endwhile;
OPERAND     STRING       . bottom of while, i=
                         09
CONTROL     END          endwhile
   94 print("\tAfter first while");
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   95
   96 // nested while loops
   97 print(">>> Second while i < 5 ... with nested while");
OPERAND     STRING       . After first while
                         09
SEPARATOR   -            (
   98 i = 1;
OPERAND     STRING       >>> Second while i < 5 ... with nested while

OPERAND     IDENTIFIER   i
OPERATOR    -            =
OPERAND     INTEGER      1
   99 Int j;
SEPARATOR   -            ;
CONTROL     DECLARE      Int
OPERAND     IDENTIFIER   j
   100 Bool bFlag;
SEPARATOR   -            ;
CONTROL     DECLARE      Bool
OPERAND     IDENTIFIER   bFlag
   101 bFlag = T;
SEPARATOR   -            ;
OPERAND     IDENTIFIER   bFlag
OPERATOR    -            =
OPERAND     BOOLEAN      T
   102 while i < 5:
SEPARATOR   -            ;
CONTROL     FLOW         while
OPERAND     IDENTIFIER   i
OPERATOR    -            <
OPERAND     INTEGER      5
   103     j = i;
SEPARATOR   -            :
OPERAND     IDENTIFIER   j
OPERATOR    -            =
OPERAND     IDENTIFIER   i
   104     print("\ttop of while, i=", i, "j=", j);
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   105     print("\t>>> Inner while j <= 3");
OPERAND     STRING       . top of while, i=
                         09
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   106     while  j <= 3:
OPERAND     STRING       . >>> Inner while j <= 3
                         09
CONTROL     FLOW         while
OPERAND     IDENTIFIER   j
OPERATOR    -            <=
OPERAND     INTEGER      3
   107         print("\t\tinner while, j=", j);
SEPARATOR   -            :
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   108         j = j + 1;
OPERAND     STRING       . . inner while, j=
                         0909
OPERAND     IDENTIFIER   j
OPERATOR    -            =
OPERAND     IDENTIFIER   j
OPERATOR    -            +
OPERAND     INTEGER      1
   109     endwhile;
SEPARATOR   -            ;
CONTROL     END          endwhile
   110     bFlag = F;
SEPARATOR   -            ;
OPERAND     IDENTIFIER   bFlag
OPERATOR    -            =
OPERAND     BOOLEAN      F
   111     print("\tbottom of while, i=", i, "j=", j);
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   112     i = i + 1;
OPERAND     STRING       . bottom of while, i=
                         09
OPERAND     IDENTIFIER   i
OPERATOR    -            =
OPERAND     IDENTIFIER   i
OPERATOR    -            +
OPERAND     INTEGER      1
   113 endwhile;
SEPARATOR   -            ;
CONTROL     END          endwhile
   114 print("\tAfter outer while");
SEPARATOR   -            ;
FUNCTION    BUILTIN      print
SEPARATOR   -            (
   115
OPERAND     STRING       . After outer while
                         09